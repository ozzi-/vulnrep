package models;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class Vulnerability {
	private double cvss;
	private String title;
	private Date published;
	private String href;
	private String vhref;
	private String id;
	private String description;
	private String searchTerm;
	private ArrayList<Metric> metrics = new ArrayList<Metric>();

	public ArrayList<Metric> getVectors() {
		return metrics;
	}

	public String metricToHTML() {
		String string = "";
		for (Metric metric : metrics) {
			string += metric.toFormattedString()+", ";
		}
		if(string!=""){
			string = string.substring(0, string.length()-2)+"<br>";
		}
		return string;
	}

	public void addMetric(Metric metric) {
		metrics.add(metric);
	}

	public double getCvss() {
		return cvss;
	}

	public void setCvss(double cvss) {
		this.cvss = cvss;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public Date getPublished() {
		return published;
	}

	public void setPublished(Date published) {
		this.published = published;
	}

	public void setPublished(String published) {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		try {
			this.published = format.parse(published);
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}

	public String getHref() {
		return href;
	}

	public void setHref(String href) {
		this.href = href;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getSearchTerm() {
		return searchTerm;
	}

	public void setSearchTerm(String searchTerm) {
		this.searchTerm = searchTerm;
	}

	public String getVhref() {
		return vhref;
	}

	public void setVhref(String vhref) {
		this.vhref = vhref;
	}

	public void parseAndAddMetrics(String Metrics) {
		for (String Metric : Metrics.split("/")) {
			Metric MetricObject = new Metric();
			if (!Metric.equals("NONE")&& !Metric.isEmpty() && Metric.contains(":")) {
				MetricObject.setMetric(Metric.split(":")[0]);
				MetricObject.setValue(Metric.split(":")[1]);
				addMetric(MetricObject);
			}
		}
	}

	public String getCvssAsString() {
		return cvss==0.0?"None":String.valueOf(cvss);
	}
}
